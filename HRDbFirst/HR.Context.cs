//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace HRDbFirst
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class HREntities : DbContext
    {
        public HREntities()
            : base("HREntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<Emp_Attendances> Emp_Attendances { get; set; }
        public virtual DbSet<HR_EMP_BAK> HR_EMP_BAK { get; set; }
        public virtual DbSet<sysdiagram> sysdiagrams { get; set; }
        public virtual DbSet<tbl_ConveyanceCost> tbl_ConveyanceCost { get; set; }
        public virtual DbSet<tbl_Dept_VU> tbl_Dept_VU { get; set; }
        public virtual DbSet<tbl_Device_Log_AndoidApp> tbl_Device_Log_AndoidApp { get; set; }
        public virtual DbSet<tbl_Device_Log_live> tbl_Device_Log_live { get; set; }
        public virtual DbSet<tbl_Employee_Attendance_Map> tbl_Employee_Attendance_Map { get; set; }
        public virtual DbSet<tbl_Employees> tbl_Employees { get; set; }
        public virtual DbSet<tbl_EntertainmentCost> tbl_EntertainmentCost { get; set; }
        public virtual DbSet<tbl_Leave_Applications> tbl_Leave_Applications { get; set; }
        public virtual DbSet<tbl_LeaveDefinition> tbl_LeaveDefinition { get; set; }
        public virtual DbSet<tbl_LeaveStatistics_Employee> tbl_LeaveStatistics_Employee { get; set; }
        public virtual DbSet<tbl_OTPLog> tbl_OTPLog { get; set; }
        public virtual DbSet<tbl_Salary_info> tbl_Salary_info { get; set; }
        public virtual DbSet<tbl_SecurityLog> tbl_SecurityLog { get; set; }
        public virtual DbSet<HR_Attendance_bak> HR_Attendance_bak { get; set; }
        public virtual DbSet<tbl_1__> tbl_1__ { get; set; }
        public virtual DbSet<tbl_Attendance> tbl_Attendance { get; set; }
        public virtual DbSet<tbl_Attendance_temp> tbl_Attendance_temp { get; set; }
        public virtual DbSet<tbl_Hrholiday> tbl_Hrholiday { get; set; }
        public virtual DbSet<tbl_TimeRules> tbl_TimeRules { get; set; }
        public virtual DbSet<leav_0_save> leav_0_save { get; set; }
        public virtual DbSet<View_1> View_1 { get; set; }
        public virtual DbSet<View_2> View_2 { get; set; }
        public virtual DbSet<View_3> View_3 { get; set; }
        public virtual DbSet<View_4> View_4 { get; set; }
        public virtual DbSet<View_5> View_5 { get; set; }
        public virtual DbSet<View_6> View_6 { get; set; }
        public virtual DbSet<View_6a> View_6a { get; set; }
    
        public virtual ObjectResult<AttandanceUserList_Result> AttandanceUserList()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<AttandanceUserList_Result>("AttandanceUserList");
        }
    
        public virtual ObjectResult<AttendanceListDropDown_Result> AttendanceListDropDown()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<AttendanceListDropDown_Result>("AttendanceListDropDown");
        }
    
        public virtual ObjectResult<GetTopAttendace_App_Result> GetTopAttendace_App()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetTopAttendace_App_Result>("GetTopAttendace_App");
        }
    
        public virtual int InsertDailyAttendance(string userID, string cHECKTIME)
        {
            var userIDParameter = userID != null ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(string));
    
            var cHECKTIMEParameter = cHECKTIME != null ?
                new ObjectParameter("CHECKTIME", cHECKTIME) :
                new ObjectParameter("CHECKTIME", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertDailyAttendance", userIDParameter, cHECKTIMEParameter);
        }
    
        public virtual int sp_alterdiagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_alterdiagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_creatediagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_creatediagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_DeleteFromHrholiday(Nullable<System.DateTime> datetime, Nullable<bool> isHoliday, string reason)
        {
            var datetimeParameter = datetime.HasValue ?
                new ObjectParameter("datetime", datetime) :
                new ObjectParameter("datetime", typeof(System.DateTime));
    
            var isHolidayParameter = isHoliday.HasValue ?
                new ObjectParameter("isHoliday", isHoliday) :
                new ObjectParameter("isHoliday", typeof(bool));
    
            var reasonParameter = reason != null ?
                new ObjectParameter("reason", reason) :
                new ObjectParameter("reason", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_DeleteFromHrholiday", datetimeParameter, isHolidayParameter, reasonParameter);
        }
    
        public virtual int sp_dropdiagram(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_dropdiagram", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<sp_GetHolidayApplicationList_Result> sp_GetHolidayApplicationList()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GetHolidayApplicationList_Result>("sp_GetHolidayApplicationList");
        }
    
        public virtual ObjectResult<sp_helpdiagramdefinition_Result> sp_helpdiagramdefinition(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagramdefinition_Result>("sp_helpdiagramdefinition", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagrams_Result> sp_helpdiagrams(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagrams_Result>("sp_helpdiagrams", diagramnameParameter, owner_idParameter);
        }
    
        public virtual int sp_insertIntoHrholiday(Nullable<System.DateTime> datetime, Nullable<bool> isHoliday, string reason)
        {
            var datetimeParameter = datetime.HasValue ?
                new ObjectParameter("datetime", datetime) :
                new ObjectParameter("datetime", typeof(System.DateTime));
    
            var isHolidayParameter = isHoliday.HasValue ?
                new ObjectParameter("isHoliday", isHoliday) :
                new ObjectParameter("isHoliday", typeof(bool));
    
            var reasonParameter = reason != null ?
                new ObjectParameter("reason", reason) :
                new ObjectParameter("reason", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_insertIntoHrholiday", datetimeParameter, isHolidayParameter, reasonParameter);
        }
    
        public virtual int sp_insertUserInfoForAUtomateData()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_insertUserInfoForAUtomateData");
        }
    
        public virtual int sp_LateLogic()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_LateLogic");
        }
    
        public virtual int sp_renamediagram(string diagramname, Nullable<int> owner_id, string new_diagramname)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var new_diagramnameParameter = new_diagramname != null ?
                new ObjectParameter("new_diagramname", new_diagramname) :
                new ObjectParameter("new_diagramname", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_renamediagram", diagramnameParameter, owner_idParameter, new_diagramnameParameter);
        }
    
        public virtual int sp_upgraddiagrams()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_upgraddiagrams");
        }
    
        public virtual ObjectResult<spAppliedLeavesByDept_Result> spAppliedLeavesByDept(string deptCode, string leaveStatus, string empCode, Nullable<int> type)
        {
            var deptCodeParameter = deptCode != null ?
                new ObjectParameter("DeptCode", deptCode) :
                new ObjectParameter("DeptCode", typeof(string));
    
            var leaveStatusParameter = leaveStatus != null ?
                new ObjectParameter("LeaveStatus", leaveStatus) :
                new ObjectParameter("LeaveStatus", typeof(string));
    
            var empCodeParameter = empCode != null ?
                new ObjectParameter("EmpCode", empCode) :
                new ObjectParameter("EmpCode", typeof(string));
    
            var typeParameter = type.HasValue ?
                new ObjectParameter("type", type) :
                new ObjectParameter("type", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spAppliedLeavesByDept_Result>("spAppliedLeavesByDept", deptCodeParameter, leaveStatusParameter, empCodeParameter, typeParameter);
        }
    
        public virtual int spApplyLeave(string employeeCode, string leaveCode, string deptCode, Nullable<System.DateTime> leaveFrom, Nullable<System.DateTime> leaveTill, string applicantComment, string supportingDocZip, string insuranceCalimPDF, Nullable<bool> isHalf, string responsiblePersons)
        {
            var employeeCodeParameter = employeeCode != null ?
                new ObjectParameter("EmployeeCode", employeeCode) :
                new ObjectParameter("EmployeeCode", typeof(string));
    
            var leaveCodeParameter = leaveCode != null ?
                new ObjectParameter("LeaveCode", leaveCode) :
                new ObjectParameter("LeaveCode", typeof(string));
    
            var deptCodeParameter = deptCode != null ?
                new ObjectParameter("DeptCode", deptCode) :
                new ObjectParameter("DeptCode", typeof(string));
    
            var leaveFromParameter = leaveFrom.HasValue ?
                new ObjectParameter("LeaveFrom", leaveFrom) :
                new ObjectParameter("LeaveFrom", typeof(System.DateTime));
    
            var leaveTillParameter = leaveTill.HasValue ?
                new ObjectParameter("LeaveTill", leaveTill) :
                new ObjectParameter("LeaveTill", typeof(System.DateTime));
    
            var applicantCommentParameter = applicantComment != null ?
                new ObjectParameter("ApplicantComment", applicantComment) :
                new ObjectParameter("ApplicantComment", typeof(string));
    
            var supportingDocZipParameter = supportingDocZip != null ?
                new ObjectParameter("SupportingDocZip", supportingDocZip) :
                new ObjectParameter("SupportingDocZip", typeof(string));
    
            var insuranceCalimPDFParameter = insuranceCalimPDF != null ?
                new ObjectParameter("InsuranceCalimPDF", insuranceCalimPDF) :
                new ObjectParameter("InsuranceCalimPDF", typeof(string));
    
            var isHalfParameter = isHalf.HasValue ?
                new ObjectParameter("isHalf", isHalf) :
                new ObjectParameter("isHalf", typeof(bool));
    
            var responsiblePersonsParameter = responsiblePersons != null ?
                new ObjectParameter("ResponsiblePersons", responsiblePersons) :
                new ObjectParameter("ResponsiblePersons", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spApplyLeave", employeeCodeParameter, leaveCodeParameter, deptCodeParameter, leaveFromParameter, leaveTillParameter, applicantCommentParameter, supportingDocZipParameter, insuranceCalimPDFParameter, isHalfParameter, responsiblePersonsParameter);
        }
    
        public virtual int spChangePasswordEmployee(string userCode, string oldPassowrd, string newPassowrd)
        {
            var userCodeParameter = userCode != null ?
                new ObjectParameter("UserCode", userCode) :
                new ObjectParameter("UserCode", typeof(string));
    
            var oldPassowrdParameter = oldPassowrd != null ?
                new ObjectParameter("oldPassowrd", oldPassowrd) :
                new ObjectParameter("oldPassowrd", typeof(string));
    
            var newPassowrdParameter = newPassowrd != null ?
                new ObjectParameter("NewPassowrd", newPassowrd) :
                new ObjectParameter("NewPassowrd", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spChangePasswordEmployee", userCodeParameter, oldPassowrdParameter, newPassowrdParameter);
        }
    
        public virtual ObjectResult<spCheckDoubleLeave_Result> spCheckDoubleLeave(string employeeCode, string leaveCode, Nullable<System.DateTime> dateFrom, Nullable<System.DateTime> dateTo)
        {
            var employeeCodeParameter = employeeCode != null ?
                new ObjectParameter("EmployeeCode", employeeCode) :
                new ObjectParameter("EmployeeCode", typeof(string));
    
            var leaveCodeParameter = leaveCode != null ?
                new ObjectParameter("LeaveCode", leaveCode) :
                new ObjectParameter("LeaveCode", typeof(string));
    
            var dateFromParameter = dateFrom.HasValue ?
                new ObjectParameter("DateFrom", dateFrom) :
                new ObjectParameter("DateFrom", typeof(System.DateTime));
    
            var dateToParameter = dateTo.HasValue ?
                new ObjectParameter("DateTo", dateTo) :
                new ObjectParameter("DateTo", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spCheckDoubleLeave_Result>("spCheckDoubleLeave", employeeCodeParameter, leaveCodeParameter, dateFromParameter, dateToParameter);
        }
    
        public virtual int spEmployeePasswordResend()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spEmployeePasswordResend");
        }
    
        public virtual ObjectResult<spGetAppliedCosts_Result> spGetAppliedCosts(string costType, string employeeCode, Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, string status)
        {
            var costTypeParameter = costType != null ?
                new ObjectParameter("CostType", costType) :
                new ObjectParameter("CostType", typeof(string));
    
            var employeeCodeParameter = employeeCode != null ?
                new ObjectParameter("EmployeeCode", employeeCode) :
                new ObjectParameter("EmployeeCode", typeof(string));
    
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            var statusParameter = status != null ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetAppliedCosts_Result>("spGetAppliedCosts", costTypeParameter, employeeCodeParameter, fromDateParameter, toDateParameter, statusParameter);
        }
    
        public virtual ObjectResult<spGetAttendanceReportbyDate_Result> spGetAttendanceReportbyDate(Nullable<System.DateTime> from, Nullable<System.DateTime> to, Nullable<int> no)
        {
            var fromParameter = from.HasValue ?
                new ObjectParameter("from", from) :
                new ObjectParameter("from", typeof(System.DateTime));
    
            var toParameter = to.HasValue ?
                new ObjectParameter("to", to) :
                new ObjectParameter("to", typeof(System.DateTime));
    
            var noParameter = no.HasValue ?
                new ObjectParameter("no", no) :
                new ObjectParameter("no", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetAttendanceReportbyDate_Result>("spGetAttendanceReportbyDate", fromParameter, toParameter, noParameter);
        }
    
        public virtual ObjectResult<spGetAttendanceReportForEmployee_Result> spGetAttendanceReportForEmployee(Nullable<System.DateTime> from, Nullable<System.DateTime> to, Nullable<int> attendanceID)
        {
            var fromParameter = from.HasValue ?
                new ObjectParameter("from", from) :
                new ObjectParameter("from", typeof(System.DateTime));
    
            var toParameter = to.HasValue ?
                new ObjectParameter("to", to) :
                new ObjectParameter("to", typeof(System.DateTime));
    
            var attendanceIDParameter = attendanceID.HasValue ?
                new ObjectParameter("AttendanceID", attendanceID) :
                new ObjectParameter("AttendanceID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetAttendanceReportForEmployee_Result>("spGetAttendanceReportForEmployee", fromParameter, toParameter, attendanceIDParameter);
        }
    
        public virtual ObjectResult<spGetDepts_Result> spGetDepts()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetDepts_Result>("spGetDepts");
        }
    
        public virtual ObjectResult<spGetEmployeeCode_Result> spGetEmployeeCode(string userCode)
        {
            var userCodeParameter = userCode != null ?
                new ObjectParameter("UserCode", userCode) :
                new ObjectParameter("UserCode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetEmployeeCode_Result>("spGetEmployeeCode", userCodeParameter);
        }
    
        public virtual ObjectResult<spGetEmployeeList_Result> spGetEmployeeList()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetEmployeeList_Result>("spGetEmployeeList");
        }
    
        public virtual ObjectResult<spGetEmployeesByDept_Result> spGetEmployeesByDept(string employeeCode, string deptCode, string isManager)
        {
            var employeeCodeParameter = employeeCode != null ?
                new ObjectParameter("EmployeeCode", employeeCode) :
                new ObjectParameter("EmployeeCode", typeof(string));
    
            var deptCodeParameter = deptCode != null ?
                new ObjectParameter("DeptCode", deptCode) :
                new ObjectParameter("DeptCode", typeof(string));
    
            var isManagerParameter = isManager != null ?
                new ObjectParameter("IsManager", isManager) :
                new ObjectParameter("IsManager", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetEmployeesByDept_Result>("spGetEmployeesByDept", employeeCodeParameter, deptCodeParameter, isManagerParameter);
        }
    
        public virtual ObjectResult<spGetHoliday_Result> spGetHoliday()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetHoliday_Result>("spGetHoliday");
        }
    
        public virtual int spGetHRusersfromLogin()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spGetHRusersfromLogin");
        }
    
        public virtual ObjectResult<spGetleaveBalance_Result> spGetleaveBalance(string employeeCode, string leaveCode)
        {
            var employeeCodeParameter = employeeCode != null ?
                new ObjectParameter("EmployeeCode", employeeCode) :
                new ObjectParameter("EmployeeCode", typeof(string));
    
            var leaveCodeParameter = leaveCode != null ?
                new ObjectParameter("LeaveCode", leaveCode) :
                new ObjectParameter("LeaveCode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetleaveBalance_Result>("spGetleaveBalance", employeeCodeParameter, leaveCodeParameter);
        }
    
        public virtual ObjectResult<spGetLeavebyAppCode_Result> spGetLeavebyAppCode(string appCode)
        {
            var appCodeParameter = appCode != null ?
                new ObjectParameter("AppCode", appCode) :
                new ObjectParameter("AppCode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetLeavebyAppCode_Result>("spGetLeavebyAppCode", appCodeParameter);
        }
    
        public virtual ObjectResult<spGetLeaveType_Result> spGetLeaveType(string employeeCode)
        {
            var employeeCodeParameter = employeeCode != null ?
                new ObjectParameter("EmployeeCode", employeeCode) :
                new ObjectParameter("EmployeeCode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetLeaveType_Result>("spGetLeaveType", employeeCodeParameter);
        }
    
        public virtual ObjectResult<spGetListofManager_Result> spGetListofManager(string deptCode)
        {
            var deptCodeParameter = deptCode != null ?
                new ObjectParameter("DeptCode", deptCode) :
                new ObjectParameter("DeptCode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetListofManager_Result>("spGetListofManager", deptCodeParameter);
        }
    
        public virtual ObjectResult<spGetSalaryForEmployee_Result> spGetSalaryForEmployee(string employeeCode, string grossSalary, string bonus)
        {
            var employeeCodeParameter = employeeCode != null ?
                new ObjectParameter("EmployeeCode", employeeCode) :
                new ObjectParameter("EmployeeCode", typeof(string));
    
            var grossSalaryParameter = grossSalary != null ?
                new ObjectParameter("GrossSalary", grossSalary) :
                new ObjectParameter("GrossSalary", typeof(string));
    
            var bonusParameter = bonus != null ?
                new ObjectParameter("Bonus", bonus) :
                new ObjectParameter("Bonus", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetSalaryForEmployee_Result>("spGetSalaryForEmployee", employeeCodeParameter, grossSalaryParameter, bonusParameter);
        }
    
        public virtual ObjectResult<spGetSupervisorsByDept_Result> spGetSupervisorsByDept(string deptCode)
        {
            var deptCodeParameter = deptCode != null ?
                new ObjectParameter("DeptCode", deptCode) :
                new ObjectParameter("DeptCode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetSupervisorsByDept_Result>("spGetSupervisorsByDept", deptCodeParameter);
        }
    
        public virtual ObjectResult<spGetTotalAbsentMonthly_Result> spGetTotalAbsentMonthly(Nullable<System.DateTime> from, Nullable<System.DateTime> to)
        {
            var fromParameter = from.HasValue ?
                new ObjectParameter("from", from) :
                new ObjectParameter("from", typeof(System.DateTime));
    
            var toParameter = to.HasValue ?
                new ObjectParameter("to", to) :
                new ObjectParameter("to", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetTotalAbsentMonthly_Result>("spGetTotalAbsentMonthly", fromParameter, toParameter);
        }
    
        public virtual int spGetTotalAttendanceReportMonthly(Nullable<System.DateTime> fROM, Nullable<System.DateTime> tO, string no)
        {
            var fROMParameter = fROM.HasValue ?
                new ObjectParameter("FROM", fROM) :
                new ObjectParameter("FROM", typeof(System.DateTime));
    
            var tOParameter = tO.HasValue ?
                new ObjectParameter("TO", tO) :
                new ObjectParameter("TO", typeof(System.DateTime));
    
            var noParameter = no != null ?
                new ObjectParameter("No", no) :
                new ObjectParameter("No", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spGetTotalAttendanceReportMonthly", fROMParameter, tOParameter, noParameter);
        }
    
        public virtual ObjectResult<spGetTotalLatesMonthly_Result> spGetTotalLatesMonthly(Nullable<System.DateTime> from, Nullable<System.DateTime> to)
        {
            var fromParameter = from.HasValue ?
                new ObjectParameter("from", from) :
                new ObjectParameter("from", typeof(System.DateTime));
    
            var toParameter = to.HasValue ?
                new ObjectParameter("to", to) :
                new ObjectParameter("to", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetTotalLatesMonthly_Result>("spGetTotalLatesMonthly", fromParameter, toParameter);
        }
    
        public virtual ObjectResult<spGetTotalPresentMonthly_Result> spGetTotalPresentMonthly(Nullable<System.DateTime> from, Nullable<System.DateTime> to)
        {
            var fromParameter = from.HasValue ?
                new ObjectParameter("from", from) :
                new ObjectParameter("from", typeof(System.DateTime));
    
            var toParameter = to.HasValue ?
                new ObjectParameter("to", to) :
                new ObjectParameter("to", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetTotalPresentMonthly_Result>("spGetTotalPresentMonthly", fromParameter, toParameter);
        }
    
        public virtual ObjectResult<spGetTypesofLeaves_Result> spGetTypesofLeaves()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetTypesofLeaves_Result>("spGetTypesofLeaves");
        }
    
        public virtual int spHR_AttendanceUpload(string pathFileName, string shortCode)
        {
            var pathFileNameParameter = pathFileName != null ?
                new ObjectParameter("PathFileName", pathFileName) :
                new ObjectParameter("PathFileName", typeof(string));
    
            var shortCodeParameter = shortCode != null ?
                new ObjectParameter("ShortCode", shortCode) :
                new ObjectParameter("ShortCode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spHR_AttendanceUpload", pathFileNameParameter, shortCodeParameter);
        }
    
        public virtual int spInsertAndUpdateConveyanceCost(Nullable<long> iD, string employeeCode, Nullable<System.DateTime> date, string fromLocation, string toLocation, Nullable<double> cNG, Nullable<double> car, Nullable<double> taxiCab, Nullable<double> rickshaw, Nullable<double> bus, Nullable<double> totalAmount, string employeeComment, string attachedFileName, string financeApproval, string financeComment, string financeApprovedBy, string managementApproval, string managementComment, string managementApprovalBy)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(long));
    
            var employeeCodeParameter = employeeCode != null ?
                new ObjectParameter("EmployeeCode", employeeCode) :
                new ObjectParameter("EmployeeCode", typeof(string));
    
            var dateParameter = date.HasValue ?
                new ObjectParameter("Date", date) :
                new ObjectParameter("Date", typeof(System.DateTime));
    
            var fromLocationParameter = fromLocation != null ?
                new ObjectParameter("FromLocation", fromLocation) :
                new ObjectParameter("FromLocation", typeof(string));
    
            var toLocationParameter = toLocation != null ?
                new ObjectParameter("ToLocation", toLocation) :
                new ObjectParameter("ToLocation", typeof(string));
    
            var cNGParameter = cNG.HasValue ?
                new ObjectParameter("CNG", cNG) :
                new ObjectParameter("CNG", typeof(double));
    
            var carParameter = car.HasValue ?
                new ObjectParameter("Car", car) :
                new ObjectParameter("Car", typeof(double));
    
            var taxiCabParameter = taxiCab.HasValue ?
                new ObjectParameter("TaxiCab", taxiCab) :
                new ObjectParameter("TaxiCab", typeof(double));
    
            var rickshawParameter = rickshaw.HasValue ?
                new ObjectParameter("Rickshaw", rickshaw) :
                new ObjectParameter("Rickshaw", typeof(double));
    
            var busParameter = bus.HasValue ?
                new ObjectParameter("Bus", bus) :
                new ObjectParameter("Bus", typeof(double));
    
            var totalAmountParameter = totalAmount.HasValue ?
                new ObjectParameter("TotalAmount", totalAmount) :
                new ObjectParameter("TotalAmount", typeof(double));
    
            var employeeCommentParameter = employeeComment != null ?
                new ObjectParameter("EmployeeComment", employeeComment) :
                new ObjectParameter("EmployeeComment", typeof(string));
    
            var attachedFileNameParameter = attachedFileName != null ?
                new ObjectParameter("AttachedFileName", attachedFileName) :
                new ObjectParameter("AttachedFileName", typeof(string));
    
            var financeApprovalParameter = financeApproval != null ?
                new ObjectParameter("FinanceApproval", financeApproval) :
                new ObjectParameter("FinanceApproval", typeof(string));
    
            var financeCommentParameter = financeComment != null ?
                new ObjectParameter("FinanceComment", financeComment) :
                new ObjectParameter("FinanceComment", typeof(string));
    
            var financeApprovedByParameter = financeApprovedBy != null ?
                new ObjectParameter("FinanceApprovedBy", financeApprovedBy) :
                new ObjectParameter("FinanceApprovedBy", typeof(string));
    
            var managementApprovalParameter = managementApproval != null ?
                new ObjectParameter("ManagementApproval", managementApproval) :
                new ObjectParameter("ManagementApproval", typeof(string));
    
            var managementCommentParameter = managementComment != null ?
                new ObjectParameter("ManagementComment", managementComment) :
                new ObjectParameter("ManagementComment", typeof(string));
    
            var managementApprovalByParameter = managementApprovalBy != null ?
                new ObjectParameter("ManagementApprovalBy", managementApprovalBy) :
                new ObjectParameter("ManagementApprovalBy", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spInsertAndUpdateConveyanceCost", iDParameter, employeeCodeParameter, dateParameter, fromLocationParameter, toLocationParameter, cNGParameter, carParameter, taxiCabParameter, rickshawParameter, busParameter, totalAmountParameter, employeeCommentParameter, attachedFileNameParameter, financeApprovalParameter, financeCommentParameter, financeApprovedByParameter, managementApprovalParameter, managementCommentParameter, managementApprovalByParameter);
        }
    
        public virtual int spInsertAndUpdateEntertainmentCost(Nullable<long> iD, string employeeCode, Nullable<System.DateTime> date, string costType, Nullable<double> lunch, Nullable<double> snacks, Nullable<double> drinks, string attachedFileName, Nullable<double> totalAmount, string employeeComment, string financeApproval, string financeComment, string financeApprovedBy, string managementApproval, string managementComment, string managementApprovalBy)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(long));
    
            var employeeCodeParameter = employeeCode != null ?
                new ObjectParameter("EmployeeCode", employeeCode) :
                new ObjectParameter("EmployeeCode", typeof(string));
    
            var dateParameter = date.HasValue ?
                new ObjectParameter("Date", date) :
                new ObjectParameter("Date", typeof(System.DateTime));
    
            var costTypeParameter = costType != null ?
                new ObjectParameter("CostType", costType) :
                new ObjectParameter("CostType", typeof(string));
    
            var lunchParameter = lunch.HasValue ?
                new ObjectParameter("Lunch", lunch) :
                new ObjectParameter("Lunch", typeof(double));
    
            var snacksParameter = snacks.HasValue ?
                new ObjectParameter("Snacks", snacks) :
                new ObjectParameter("Snacks", typeof(double));
    
            var drinksParameter = drinks.HasValue ?
                new ObjectParameter("Drinks", drinks) :
                new ObjectParameter("Drinks", typeof(double));
    
            var attachedFileNameParameter = attachedFileName != null ?
                new ObjectParameter("AttachedFileName", attachedFileName) :
                new ObjectParameter("AttachedFileName", typeof(string));
    
            var totalAmountParameter = totalAmount.HasValue ?
                new ObjectParameter("TotalAmount", totalAmount) :
                new ObjectParameter("TotalAmount", typeof(double));
    
            var employeeCommentParameter = employeeComment != null ?
                new ObjectParameter("EmployeeComment", employeeComment) :
                new ObjectParameter("EmployeeComment", typeof(string));
    
            var financeApprovalParameter = financeApproval != null ?
                new ObjectParameter("FinanceApproval", financeApproval) :
                new ObjectParameter("FinanceApproval", typeof(string));
    
            var financeCommentParameter = financeComment != null ?
                new ObjectParameter("FinanceComment", financeComment) :
                new ObjectParameter("FinanceComment", typeof(string));
    
            var financeApprovedByParameter = financeApprovedBy != null ?
                new ObjectParameter("FinanceApprovedBy", financeApprovedBy) :
                new ObjectParameter("FinanceApprovedBy", typeof(string));
    
            var managementApprovalParameter = managementApproval != null ?
                new ObjectParameter("ManagementApproval", managementApproval) :
                new ObjectParameter("ManagementApproval", typeof(string));
    
            var managementCommentParameter = managementComment != null ?
                new ObjectParameter("ManagementComment", managementComment) :
                new ObjectParameter("ManagementComment", typeof(string));
    
            var managementApprovalByParameter = managementApprovalBy != null ?
                new ObjectParameter("ManagementApprovalBy", managementApprovalBy) :
                new ObjectParameter("ManagementApprovalBy", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spInsertAndUpdateEntertainmentCost", iDParameter, employeeCodeParameter, dateParameter, costTypeParameter, lunchParameter, snacksParameter, drinksParameter, attachedFileNameParameter, totalAmountParameter, employeeCommentParameter, financeApprovalParameter, financeCommentParameter, financeApprovedByParameter, managementApprovalParameter, managementCommentParameter, managementApprovalByParameter);
        }
    
        public virtual int spInsertDevice_Log_live(string deviceID, string attendanceID, Nullable<System.DateTime> accessDate, string accessTime)
        {
            var deviceIDParameter = deviceID != null ?
                new ObjectParameter("DeviceID", deviceID) :
                new ObjectParameter("DeviceID", typeof(string));
    
            var attendanceIDParameter = attendanceID != null ?
                new ObjectParameter("AttendanceID", attendanceID) :
                new ObjectParameter("AttendanceID", typeof(string));
    
            var accessDateParameter = accessDate.HasValue ?
                new ObjectParameter("AccessDate", accessDate) :
                new ObjectParameter("AccessDate", typeof(System.DateTime));
    
            var accessTimeParameter = accessTime != null ?
                new ObjectParameter("AccessTime", accessTime) :
                new ObjectParameter("AccessTime", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spInsertDevice_Log_live", deviceIDParameter, attendanceIDParameter, accessDateParameter, accessTimeParameter);
        }
    
        public virtual ObjectResult<string> spInsertEmployee(string userCode, string attendanceID, string employeeFirstName, string employeeLastName, string employeeEmail, Nullable<System.DateTime> dateOfBirth, string designation, string contactDetails, string emergencyContactDetails, string bloodGroup, string nationalID, string nationalIDScanned, Nullable<System.DateTime> appointmentDate, string deptCode, string supervisorCode, string leaveMailaddress1, string leaveMailaddress2, string telephone, string appointmentLetter, string photo, string manager, string status, string emergencyContactName, string emergencyContactMobileNo, string emergencyContactRelation, string emergencyContactNID, string nocAndNda, string etin)
        {
            var userCodeParameter = userCode != null ?
                new ObjectParameter("UserCode", userCode) :
                new ObjectParameter("UserCode", typeof(string));
    
            var attendanceIDParameter = attendanceID != null ?
                new ObjectParameter("AttendanceID", attendanceID) :
                new ObjectParameter("AttendanceID", typeof(string));
    
            var employeeFirstNameParameter = employeeFirstName != null ?
                new ObjectParameter("EmployeeFirstName", employeeFirstName) :
                new ObjectParameter("EmployeeFirstName", typeof(string));
    
            var employeeLastNameParameter = employeeLastName != null ?
                new ObjectParameter("EmployeeLastName", employeeLastName) :
                new ObjectParameter("EmployeeLastName", typeof(string));
    
            var employeeEmailParameter = employeeEmail != null ?
                new ObjectParameter("EmployeeEmail", employeeEmail) :
                new ObjectParameter("EmployeeEmail", typeof(string));
    
            var dateOfBirthParameter = dateOfBirth.HasValue ?
                new ObjectParameter("DateOfBirth", dateOfBirth) :
                new ObjectParameter("DateOfBirth", typeof(System.DateTime));
    
            var designationParameter = designation != null ?
                new ObjectParameter("Designation", designation) :
                new ObjectParameter("Designation", typeof(string));
    
            var contactDetailsParameter = contactDetails != null ?
                new ObjectParameter("ContactDetails", contactDetails) :
                new ObjectParameter("ContactDetails", typeof(string));
    
            var emergencyContactDetailsParameter = emergencyContactDetails != null ?
                new ObjectParameter("EmergencyContactDetails", emergencyContactDetails) :
                new ObjectParameter("EmergencyContactDetails", typeof(string));
    
            var bloodGroupParameter = bloodGroup != null ?
                new ObjectParameter("BloodGroup", bloodGroup) :
                new ObjectParameter("BloodGroup", typeof(string));
    
            var nationalIDParameter = nationalID != null ?
                new ObjectParameter("NationalID", nationalID) :
                new ObjectParameter("NationalID", typeof(string));
    
            var nationalIDScannedParameter = nationalIDScanned != null ?
                new ObjectParameter("NationalIDScanned", nationalIDScanned) :
                new ObjectParameter("NationalIDScanned", typeof(string));
    
            var appointmentDateParameter = appointmentDate.HasValue ?
                new ObjectParameter("AppointmentDate", appointmentDate) :
                new ObjectParameter("AppointmentDate", typeof(System.DateTime));
    
            var deptCodeParameter = deptCode != null ?
                new ObjectParameter("DeptCode", deptCode) :
                new ObjectParameter("DeptCode", typeof(string));
    
            var supervisorCodeParameter = supervisorCode != null ?
                new ObjectParameter("SupervisorCode", supervisorCode) :
                new ObjectParameter("SupervisorCode", typeof(string));
    
            var leaveMailaddress1Parameter = leaveMailaddress1 != null ?
                new ObjectParameter("LeaveMailaddress1", leaveMailaddress1) :
                new ObjectParameter("LeaveMailaddress1", typeof(string));
    
            var leaveMailaddress2Parameter = leaveMailaddress2 != null ?
                new ObjectParameter("LeaveMailaddress2", leaveMailaddress2) :
                new ObjectParameter("LeaveMailaddress2", typeof(string));
    
            var telephoneParameter = telephone != null ?
                new ObjectParameter("Telephone", telephone) :
                new ObjectParameter("Telephone", typeof(string));
    
            var appointmentLetterParameter = appointmentLetter != null ?
                new ObjectParameter("AppointmentLetter", appointmentLetter) :
                new ObjectParameter("AppointmentLetter", typeof(string));
    
            var photoParameter = photo != null ?
                new ObjectParameter("Photo", photo) :
                new ObjectParameter("Photo", typeof(string));
    
            var managerParameter = manager != null ?
                new ObjectParameter("Manager", manager) :
                new ObjectParameter("Manager", typeof(string));
    
            var statusParameter = status != null ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(string));
    
            var emergencyContactNameParameter = emergencyContactName != null ?
                new ObjectParameter("EmergencyContactName", emergencyContactName) :
                new ObjectParameter("EmergencyContactName", typeof(string));
    
            var emergencyContactMobileNoParameter = emergencyContactMobileNo != null ?
                new ObjectParameter("EmergencyContactMobileNo", emergencyContactMobileNo) :
                new ObjectParameter("EmergencyContactMobileNo", typeof(string));
    
            var emergencyContactRelationParameter = emergencyContactRelation != null ?
                new ObjectParameter("EmergencyContactRelation", emergencyContactRelation) :
                new ObjectParameter("EmergencyContactRelation", typeof(string));
    
            var emergencyContactNIDParameter = emergencyContactNID != null ?
                new ObjectParameter("EmergencyContactNID", emergencyContactNID) :
                new ObjectParameter("EmergencyContactNID", typeof(string));
    
            var nocAndNdaParameter = nocAndNda != null ?
                new ObjectParameter("NocAndNda", nocAndNda) :
                new ObjectParameter("NocAndNda", typeof(string));
    
            var etinParameter = etin != null ?
                new ObjectParameter("Etin", etin) :
                new ObjectParameter("Etin", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("spInsertEmployee", userCodeParameter, attendanceIDParameter, employeeFirstNameParameter, employeeLastNameParameter, employeeEmailParameter, dateOfBirthParameter, designationParameter, contactDetailsParameter, emergencyContactDetailsParameter, bloodGroupParameter, nationalIDParameter, nationalIDScannedParameter, appointmentDateParameter, deptCodeParameter, supervisorCodeParameter, leaveMailaddress1Parameter, leaveMailaddress2Parameter, telephoneParameter, appointmentLetterParameter, photoParameter, managerParameter, statusParameter, emergencyContactNameParameter, emergencyContactMobileNoParameter, emergencyContactRelationParameter, emergencyContactNIDParameter, nocAndNdaParameter, etinParameter);
        }
    
        public virtual ObjectResult<string> spInsertEmployeeAttendanceMap(Nullable<int> atndId, string empId, Nullable<int> flag)
        {
            var atndIdParameter = atndId.HasValue ?
                new ObjectParameter("AtndId", atndId) :
                new ObjectParameter("AtndId", typeof(int));
    
            var empIdParameter = empId != null ?
                new ObjectParameter("EmpId", empId) :
                new ObjectParameter("EmpId", typeof(string));
    
            var flagParameter = flag.HasValue ?
                new ObjectParameter("flag", flag) :
                new ObjectParameter("flag", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("spInsertEmployeeAttendanceMap", atndIdParameter, empIdParameter, flagParameter);
        }
    
        public virtual int spInsertLeaveForEmployee(string employeeCode, string leaveCode, Nullable<int> allocatedDays, Nullable<int> spentDays)
        {
            var employeeCodeParameter = employeeCode != null ?
                new ObjectParameter("EmployeeCode", employeeCode) :
                new ObjectParameter("EmployeeCode", typeof(string));
    
            var leaveCodeParameter = leaveCode != null ?
                new ObjectParameter("LeaveCode", leaveCode) :
                new ObjectParameter("LeaveCode", typeof(string));
    
            var allocatedDaysParameter = allocatedDays.HasValue ?
                new ObjectParameter("AllocatedDays", allocatedDays) :
                new ObjectParameter("AllocatedDays", typeof(int));
    
            var spentDaysParameter = spentDays.HasValue ?
                new ObjectParameter("SpentDays", spentDays) :
                new ObjectParameter("SpentDays", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spInsertLeaveForEmployee", employeeCodeParameter, leaveCodeParameter, allocatedDaysParameter, spentDaysParameter);
        }
    
        public virtual int spInsertNewLeaveType(string leaveName, string leaveDescription, string leavePreNoticeNeed, string leaveSuportedDocNeed)
        {
            var leaveNameParameter = leaveName != null ?
                new ObjectParameter("LeaveName", leaveName) :
                new ObjectParameter("LeaveName", typeof(string));
    
            var leaveDescriptionParameter = leaveDescription != null ?
                new ObjectParameter("LeaveDescription", leaveDescription) :
                new ObjectParameter("LeaveDescription", typeof(string));
    
            var leavePreNoticeNeedParameter = leavePreNoticeNeed != null ?
                new ObjectParameter("LeavePreNoticeNeed", leavePreNoticeNeed) :
                new ObjectParameter("LeavePreNoticeNeed", typeof(string));
    
            var leaveSuportedDocNeedParameter = leaveSuportedDocNeed != null ?
                new ObjectParameter("LeaveSuportedDocNeed", leaveSuportedDocNeed) :
                new ObjectParameter("LeaveSuportedDocNeed", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spInsertNewLeaveType", leaveNameParameter, leaveDescriptionParameter, leavePreNoticeNeedParameter, leaveSuportedDocNeedParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> spInsertOTPLog(string email, string oTP)
        {
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            var oTPParameter = oTP != null ?
                new ObjectParameter("OTP", oTP) :
                new ObjectParameter("OTP", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("spInsertOTPLog", emailParameter, oTPParameter);
        }
    
        public virtual int spInsertSalaryForEmployee(string employeeCode, string grossSalary, string bonus)
        {
            var employeeCodeParameter = employeeCode != null ?
                new ObjectParameter("EmployeeCode", employeeCode) :
                new ObjectParameter("EmployeeCode", typeof(string));
    
            var grossSalaryParameter = grossSalary != null ?
                new ObjectParameter("GrossSalary", grossSalary) :
                new ObjectParameter("GrossSalary", typeof(string));
    
            var bonusParameter = bonus != null ?
                new ObjectParameter("Bonus", bonus) :
                new ObjectParameter("Bonus", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spInsertSalaryForEmployee", employeeCodeParameter, grossSalaryParameter, bonusParameter);
        }
    
        public virtual int spInsertTempAttendance(Nullable<int> no, string name, string date, Nullable<System.TimeSpan> onDuty, Nullable<System.TimeSpan> offDuty, Nullable<System.TimeSpan> clockIn, Nullable<System.TimeSpan> clockOut, Nullable<System.TimeSpan> late, Nullable<System.TimeSpan> early, string absent, string department)
        {
            var noParameter = no.HasValue ?
                new ObjectParameter("No", no) :
                new ObjectParameter("No", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var dateParameter = date != null ?
                new ObjectParameter("Date", date) :
                new ObjectParameter("Date", typeof(string));
    
            var onDutyParameter = onDuty.HasValue ?
                new ObjectParameter("OnDuty", onDuty) :
                new ObjectParameter("OnDuty", typeof(System.TimeSpan));
    
            var offDutyParameter = offDuty.HasValue ?
                new ObjectParameter("OffDuty", offDuty) :
                new ObjectParameter("OffDuty", typeof(System.TimeSpan));
    
            var clockInParameter = clockIn.HasValue ?
                new ObjectParameter("ClockIn", clockIn) :
                new ObjectParameter("ClockIn", typeof(System.TimeSpan));
    
            var clockOutParameter = clockOut.HasValue ?
                new ObjectParameter("ClockOut", clockOut) :
                new ObjectParameter("ClockOut", typeof(System.TimeSpan));
    
            var lateParameter = late.HasValue ?
                new ObjectParameter("Late", late) :
                new ObjectParameter("Late", typeof(System.TimeSpan));
    
            var earlyParameter = early.HasValue ?
                new ObjectParameter("Early", early) :
                new ObjectParameter("Early", typeof(System.TimeSpan));
    
            var absentParameter = absent != null ?
                new ObjectParameter("Absent", absent) :
                new ObjectParameter("Absent", typeof(string));
    
            var departmentParameter = department != null ?
                new ObjectParameter("Department", department) :
                new ObjectParameter("Department", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spInsertTempAttendance", noParameter, nameParameter, dateParameter, onDutyParameter, offDutyParameter, clockInParameter, clockOutParameter, lateParameter, earlyParameter, absentParameter, departmentParameter);
        }
    
        public virtual int SPInsertYearlyDayOff()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SPInsertYearlyDayOff");
        }
    
        public virtual ObjectResult<spLeaveReport_Result> spLeaveReport(string employeeCode)
        {
            var employeeCodeParameter = employeeCode != null ?
                new ObjectParameter("EmployeeCode", employeeCode) :
                new ObjectParameter("EmployeeCode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spLeaveReport_Result>("spLeaveReport", employeeCodeParameter);
        }
    
        public virtual ObjectResult<spMyAppliedLeaves_Result> spMyAppliedLeaves(string employeeCode, Nullable<System.DateTime> leaveFrom, Nullable<System.DateTime> leaveTill, string status)
        {
            var employeeCodeParameter = employeeCode != null ?
                new ObjectParameter("EmployeeCode", employeeCode) :
                new ObjectParameter("EmployeeCode", typeof(string));
    
            var leaveFromParameter = leaveFrom.HasValue ?
                new ObjectParameter("LeaveFrom", leaveFrom) :
                new ObjectParameter("LeaveFrom", typeof(System.DateTime));
    
            var leaveTillParameter = leaveTill.HasValue ?
                new ObjectParameter("LeaveTill", leaveTill) :
                new ObjectParameter("LeaveTill", typeof(System.DateTime));
    
            var statusParameter = status != null ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spMyAppliedLeaves_Result>("spMyAppliedLeaves", employeeCodeParameter, leaveFromParameter, leaveTillParameter, statusParameter);
        }
    
        public virtual int spResetPasswordWithOTP(string oTP, string newPassword)
        {
            var oTPParameter = oTP != null ?
                new ObjectParameter("OTP", oTP) :
                new ObjectParameter("OTP", typeof(string));
    
            var newPasswordParameter = newPassword != null ?
                new ObjectParameter("NewPassword", newPassword) :
                new ObjectParameter("NewPassword", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spResetPasswordWithOTP", oTPParameter, newPasswordParameter);
        }
    
        public virtual int spSaveSecurityLog(string username, string password, string iP, Nullable<int> loginFailed)
        {
            var usernameParameter = username != null ?
                new ObjectParameter("Username", username) :
                new ObjectParameter("Username", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("password", password) :
                new ObjectParameter("password", typeof(string));
    
            var iPParameter = iP != null ?
                new ObjectParameter("IP", iP) :
                new ObjectParameter("IP", typeof(string));
    
            var loginFailedParameter = loginFailed.HasValue ?
                new ObjectParameter("LoginFailed", loginFailed) :
                new ObjectParameter("LoginFailed", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spSaveSecurityLog", usernameParameter, passwordParameter, iPParameter, loginFailedParameter);
        }
    
        public virtual ObjectResult<spTodaysAttendanceFromLiveLog_Result> spTodaysAttendanceFromLiveLog()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spTodaysAttendanceFromLiveLog_Result>("spTodaysAttendanceFromLiveLog");
        }
    
        public virtual int spUpdateCostClaimsApproval(string costType, string approveDept, Nullable<long> iD, string approve, string comment, string approvedBy)
        {
            var costTypeParameter = costType != null ?
                new ObjectParameter("CostType", costType) :
                new ObjectParameter("CostType", typeof(string));
    
            var approveDeptParameter = approveDept != null ?
                new ObjectParameter("ApproveDept", approveDept) :
                new ObjectParameter("ApproveDept", typeof(string));
    
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(long));
    
            var approveParameter = approve != null ?
                new ObjectParameter("Approve", approve) :
                new ObjectParameter("Approve", typeof(string));
    
            var commentParameter = comment != null ?
                new ObjectParameter("Comment", comment) :
                new ObjectParameter("Comment", typeof(string));
    
            var approvedByParameter = approvedBy != null ?
                new ObjectParameter("ApprovedBy", approvedBy) :
                new ObjectParameter("ApprovedBy", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spUpdateCostClaimsApproval", costTypeParameter, approveDeptParameter, iDParameter, approveParameter, commentParameter, approvedByParameter);
        }
    
        public virtual int spUpdateEmployee(string employeeCode, string userCode, string attendanceID, string employeeFirstName, string employeeLastName, string employeeEmail, Nullable<System.DateTime> dateOfBirth, string designation, string contactDetails, string emergencyContactDetails, string bloodGroup, string nationalID, string nationalIDScanned, Nullable<System.DateTime> appointmentDate, string deptCode, string supervisorCode, string leaveMailaddress1, string leaveMailaddress2, string telephone, string appointmentLetter, Nullable<System.DateTime> resignationDate, string photo, string manager, string status, string emergencyContactName, string emergencyContactMobileNo, string emergencyContactRelation, string emergencyContactNID, string nocAndNda, string etin)
        {
            var employeeCodeParameter = employeeCode != null ?
                new ObjectParameter("EmployeeCode", employeeCode) :
                new ObjectParameter("EmployeeCode", typeof(string));
    
            var userCodeParameter = userCode != null ?
                new ObjectParameter("UserCode", userCode) :
                new ObjectParameter("UserCode", typeof(string));
    
            var attendanceIDParameter = attendanceID != null ?
                new ObjectParameter("AttendanceID", attendanceID) :
                new ObjectParameter("AttendanceID", typeof(string));
    
            var employeeFirstNameParameter = employeeFirstName != null ?
                new ObjectParameter("EmployeeFirstName", employeeFirstName) :
                new ObjectParameter("EmployeeFirstName", typeof(string));
    
            var employeeLastNameParameter = employeeLastName != null ?
                new ObjectParameter("EmployeeLastName", employeeLastName) :
                new ObjectParameter("EmployeeLastName", typeof(string));
    
            var employeeEmailParameter = employeeEmail != null ?
                new ObjectParameter("EmployeeEmail", employeeEmail) :
                new ObjectParameter("EmployeeEmail", typeof(string));
    
            var dateOfBirthParameter = dateOfBirth.HasValue ?
                new ObjectParameter("DateOfBirth", dateOfBirth) :
                new ObjectParameter("DateOfBirth", typeof(System.DateTime));
    
            var designationParameter = designation != null ?
                new ObjectParameter("Designation", designation) :
                new ObjectParameter("Designation", typeof(string));
    
            var contactDetailsParameter = contactDetails != null ?
                new ObjectParameter("ContactDetails", contactDetails) :
                new ObjectParameter("ContactDetails", typeof(string));
    
            var emergencyContactDetailsParameter = emergencyContactDetails != null ?
                new ObjectParameter("EmergencyContactDetails", emergencyContactDetails) :
                new ObjectParameter("EmergencyContactDetails", typeof(string));
    
            var bloodGroupParameter = bloodGroup != null ?
                new ObjectParameter("BloodGroup", bloodGroup) :
                new ObjectParameter("BloodGroup", typeof(string));
    
            var nationalIDParameter = nationalID != null ?
                new ObjectParameter("NationalID", nationalID) :
                new ObjectParameter("NationalID", typeof(string));
    
            var nationalIDScannedParameter = nationalIDScanned != null ?
                new ObjectParameter("NationalIDScanned", nationalIDScanned) :
                new ObjectParameter("NationalIDScanned", typeof(string));
    
            var appointmentDateParameter = appointmentDate.HasValue ?
                new ObjectParameter("AppointmentDate", appointmentDate) :
                new ObjectParameter("AppointmentDate", typeof(System.DateTime));
    
            var deptCodeParameter = deptCode != null ?
                new ObjectParameter("DeptCode", deptCode) :
                new ObjectParameter("DeptCode", typeof(string));
    
            var supervisorCodeParameter = supervisorCode != null ?
                new ObjectParameter("SupervisorCode", supervisorCode) :
                new ObjectParameter("SupervisorCode", typeof(string));
    
            var leaveMailaddress1Parameter = leaveMailaddress1 != null ?
                new ObjectParameter("LeaveMailaddress1", leaveMailaddress1) :
                new ObjectParameter("LeaveMailaddress1", typeof(string));
    
            var leaveMailaddress2Parameter = leaveMailaddress2 != null ?
                new ObjectParameter("LeaveMailaddress2", leaveMailaddress2) :
                new ObjectParameter("LeaveMailaddress2", typeof(string));
    
            var telephoneParameter = telephone != null ?
                new ObjectParameter("Telephone", telephone) :
                new ObjectParameter("Telephone", typeof(string));
    
            var appointmentLetterParameter = appointmentLetter != null ?
                new ObjectParameter("AppointmentLetter", appointmentLetter) :
                new ObjectParameter("AppointmentLetter", typeof(string));
    
            var resignationDateParameter = resignationDate.HasValue ?
                new ObjectParameter("ResignationDate", resignationDate) :
                new ObjectParameter("ResignationDate", typeof(System.DateTime));
    
            var photoParameter = photo != null ?
                new ObjectParameter("Photo", photo) :
                new ObjectParameter("Photo", typeof(string));
    
            var managerParameter = manager != null ?
                new ObjectParameter("Manager", manager) :
                new ObjectParameter("Manager", typeof(string));
    
            var statusParameter = status != null ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(string));
    
            var emergencyContactNameParameter = emergencyContactName != null ?
                new ObjectParameter("EmergencyContactName", emergencyContactName) :
                new ObjectParameter("EmergencyContactName", typeof(string));
    
            var emergencyContactMobileNoParameter = emergencyContactMobileNo != null ?
                new ObjectParameter("EmergencyContactMobileNo", emergencyContactMobileNo) :
                new ObjectParameter("EmergencyContactMobileNo", typeof(string));
    
            var emergencyContactRelationParameter = emergencyContactRelation != null ?
                new ObjectParameter("EmergencyContactRelation", emergencyContactRelation) :
                new ObjectParameter("EmergencyContactRelation", typeof(string));
    
            var emergencyContactNIDParameter = emergencyContactNID != null ?
                new ObjectParameter("EmergencyContactNID", emergencyContactNID) :
                new ObjectParameter("EmergencyContactNID", typeof(string));
    
            var nocAndNdaParameter = nocAndNda != null ?
                new ObjectParameter("NocAndNda", nocAndNda) :
                new ObjectParameter("NocAndNda", typeof(string));
    
            var etinParameter = etin != null ?
                new ObjectParameter("Etin", etin) :
                new ObjectParameter("Etin", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spUpdateEmployee", employeeCodeParameter, userCodeParameter, attendanceIDParameter, employeeFirstNameParameter, employeeLastNameParameter, employeeEmailParameter, dateOfBirthParameter, designationParameter, contactDetailsParameter, emergencyContactDetailsParameter, bloodGroupParameter, nationalIDParameter, nationalIDScannedParameter, appointmentDateParameter, deptCodeParameter, supervisorCodeParameter, leaveMailaddress1Parameter, leaveMailaddress2Parameter, telephoneParameter, appointmentLetterParameter, resignationDateParameter, photoParameter, managerParameter, statusParameter, emergencyContactNameParameter, emergencyContactMobileNoParameter, emergencyContactRelationParameter, emergencyContactNIDParameter, nocAndNdaParameter, etinParameter);
        }
    
        public virtual int spUpdateLeave(string applicationCode, string supervisor, string director, string supervisorComment, string directorComment)
        {
            var applicationCodeParameter = applicationCode != null ?
                new ObjectParameter("ApplicationCode", applicationCode) :
                new ObjectParameter("ApplicationCode", typeof(string));
    
            var supervisorParameter = supervisor != null ?
                new ObjectParameter("Supervisor", supervisor) :
                new ObjectParameter("Supervisor", typeof(string));
    
            var directorParameter = director != null ?
                new ObjectParameter("Director", director) :
                new ObjectParameter("Director", typeof(string));
    
            var supervisorCommentParameter = supervisorComment != null ?
                new ObjectParameter("SupervisorComment", supervisorComment) :
                new ObjectParameter("SupervisorComment", typeof(string));
    
            var directorCommentParameter = directorComment != null ?
                new ObjectParameter("DirectorComment", directorComment) :
                new ObjectParameter("DirectorComment", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spUpdateLeave", applicationCodeParameter, supervisorParameter, directorParameter, supervisorCommentParameter, directorCommentParameter);
        }
    
        public virtual int spUpdateLeaveForEmployee(string employeeCode, string leaveCode, Nullable<int> allocatedDays, Nullable<int> spentDays)
        {
            var employeeCodeParameter = employeeCode != null ?
                new ObjectParameter("EmployeeCode", employeeCode) :
                new ObjectParameter("EmployeeCode", typeof(string));
    
            var leaveCodeParameter = leaveCode != null ?
                new ObjectParameter("LeaveCode", leaveCode) :
                new ObjectParameter("LeaveCode", typeof(string));
    
            var allocatedDaysParameter = allocatedDays.HasValue ?
                new ObjectParameter("AllocatedDays", allocatedDays) :
                new ObjectParameter("AllocatedDays", typeof(int));
    
            var spentDaysParameter = spentDays.HasValue ?
                new ObjectParameter("SpentDays", spentDays) :
                new ObjectParameter("SpentDays", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spUpdateLeaveForEmployee", employeeCodeParameter, leaveCodeParameter, allocatedDaysParameter, spentDaysParameter);
        }
    
        public virtual int spUpdateLeaveType(string leaveCode, string leaveName, string leaveDescription, string leavePreNoticeNeed, string leaveSuportedDocNeed)
        {
            var leaveCodeParameter = leaveCode != null ?
                new ObjectParameter("LeaveCode", leaveCode) :
                new ObjectParameter("LeaveCode", typeof(string));
    
            var leaveNameParameter = leaveName != null ?
                new ObjectParameter("LeaveName", leaveName) :
                new ObjectParameter("LeaveName", typeof(string));
    
            var leaveDescriptionParameter = leaveDescription != null ?
                new ObjectParameter("LeaveDescription", leaveDescription) :
                new ObjectParameter("LeaveDescription", typeof(string));
    
            var leavePreNoticeNeedParameter = leavePreNoticeNeed != null ?
                new ObjectParameter("LeavePreNoticeNeed", leavePreNoticeNeed) :
                new ObjectParameter("LeavePreNoticeNeed", typeof(string));
    
            var leaveSuportedDocNeedParameter = leaveSuportedDocNeed != null ?
                new ObjectParameter("LeaveSuportedDocNeed", leaveSuportedDocNeed) :
                new ObjectParameter("LeaveSuportedDocNeed", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spUpdateLeaveType", leaveCodeParameter, leaveNameParameter, leaveDescriptionParameter, leavePreNoticeNeedParameter, leaveSuportedDocNeedParameter);
        }
    
        public virtual int spUpdateSalary(string employeeCode, string grossSalary, string bonus)
        {
            var employeeCodeParameter = employeeCode != null ?
                new ObjectParameter("EmployeeCode", employeeCode) :
                new ObjectParameter("EmployeeCode", typeof(string));
    
            var grossSalaryParameter = grossSalary != null ?
                new ObjectParameter("GrossSalary", grossSalary) :
                new ObjectParameter("GrossSalary", typeof(string));
    
            var bonusParameter = bonus != null ?
                new ObjectParameter("Bonus", bonus) :
                new ObjectParameter("Bonus", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spUpdateSalary", employeeCodeParameter, grossSalaryParameter, bonusParameter);
        }
    
        public virtual ObjectResult<spViewApprovedLeavesLeave_Result> spViewApprovedLeavesLeave(Nullable<System.DateTime> dateFrom, Nullable<System.DateTime> dateto, string empCode)
        {
            var dateFromParameter = dateFrom.HasValue ?
                new ObjectParameter("DateFrom", dateFrom) :
                new ObjectParameter("DateFrom", typeof(System.DateTime));
    
            var datetoParameter = dateto.HasValue ?
                new ObjectParameter("Dateto", dateto) :
                new ObjectParameter("Dateto", typeof(System.DateTime));
    
            var empCodeParameter = empCode != null ?
                new ObjectParameter("EmpCode", empCode) :
                new ObjectParameter("EmpCode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spViewApprovedLeavesLeave_Result>("spViewApprovedLeavesLeave", dateFromParameter, datetoParameter, empCodeParameter);
        }
    
        public virtual ObjectResult<spViewEmployees_Result> spViewEmployees(string employeeCode, string employeeName, string deptCode, string isManager)
        {
            var employeeCodeParameter = employeeCode != null ?
                new ObjectParameter("EmployeeCode", employeeCode) :
                new ObjectParameter("EmployeeCode", typeof(string));
    
            var employeeNameParameter = employeeName != null ?
                new ObjectParameter("EmployeeName", employeeName) :
                new ObjectParameter("EmployeeName", typeof(string));
    
            var deptCodeParameter = deptCode != null ?
                new ObjectParameter("DeptCode", deptCode) :
                new ObjectParameter("DeptCode", typeof(string));
    
            var isManagerParameter = isManager != null ?
                new ObjectParameter("IsManager", isManager) :
                new ObjectParameter("IsManager", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spViewEmployees_Result>("spViewEmployees", employeeCodeParameter, employeeNameParameter, deptCodeParameter, isManagerParameter);
        }
    
        public virtual ObjectResult<spViewEmployeesByCode_Result> spViewEmployeesByCode(string employeeCode)
        {
            var employeeCodeParameter = employeeCode != null ?
                new ObjectParameter("EmployeeCode", employeeCode) :
                new ObjectParameter("EmployeeCode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spViewEmployeesByCode_Result>("spViewEmployeesByCode", employeeCodeParameter);
        }
    
        public virtual ObjectResult<spViewLeaveBalance_Result> spViewLeaveBalance(string employeeCode, string leaveCode, string statisticsCode)
        {
            var employeeCodeParameter = employeeCode != null ?
                new ObjectParameter("EmployeeCode", employeeCode) :
                new ObjectParameter("EmployeeCode", typeof(string));
    
            var leaveCodeParameter = leaveCode != null ?
                new ObjectParameter("LeaveCode", leaveCode) :
                new ObjectParameter("LeaveCode", typeof(string));
    
            var statisticsCodeParameter = statisticsCode != null ?
                new ObjectParameter("StatisticsCode", statisticsCode) :
                new ObjectParameter("StatisticsCode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spViewLeaveBalance_Result>("spViewLeaveBalance", employeeCodeParameter, leaveCodeParameter, statisticsCodeParameter);
        }
    
        public virtual ObjectResult<spViewLeaveComment_Result> spViewLeaveComment(string applicationCode)
        {
            var applicationCodeParameter = applicationCode != null ?
                new ObjectParameter("ApplicationCode", applicationCode) :
                new ObjectParameter("ApplicationCode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spViewLeaveComment_Result>("spViewLeaveComment", applicationCodeParameter);
        }
    
        public virtual ObjectResult<spViewLeaveType_Result> spViewLeaveType(string leaveCode)
        {
            var leaveCodeParameter = leaveCode != null ?
                new ObjectParameter("LeaveCode", leaveCode) :
                new ObjectParameter("LeaveCode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spViewLeaveType_Result>("spViewLeaveType", leaveCodeParameter);
        }
    
        public virtual ObjectResult<spViewLiveAttendanceLogToday_Result> spViewLiveAttendanceLogToday(string employee)
        {
            var employeeParameter = employee != null ?
                new ObjectParameter("Employee", employee) :
                new ObjectParameter("Employee", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spViewLiveAttendanceLogToday_Result>("spViewLiveAttendanceLogToday", employeeParameter);
        }
    
        public virtual ObjectResult<spViewLiveLog_Result> spViewLiveLog()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spViewLiveLog_Result>("spViewLiveLog");
        }

        public System.Data.Entity.DbSet<HRDbFirst.spAppliedLeavesByDept_Result> spAppliedLeavesByDept_Result { get; set; }

        public System.Data.Entity.DbSet<HRDbFirst.spViewEmployees_Result> spViewEmployees_Result { get; set; }
    }
}
